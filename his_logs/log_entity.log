(base) root@autodl-container-664048b698-da024dca:~/EAAE# torchrun --nproc_per_node=4 baseline_bc5_entity.py
Some weights of BertForSequenceClassification were not initialized from the model checkpoint at dmis-lab/biobert-base-cased-v1.1 and are newly initialized: ['classifier.bias', 'classifier.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForSequenceClassification were not initialized from the model checkpoint at dmis-lab/biobert-base-cased-v1.1 and are newly initialized: ['classifier.bias', 'classifier.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForSequenceClassification were not initialized from the model checkpoint at dmis-lab/biobert-base-cased-v1.1 and are newly initialized: ['classifier.bias', 'classifier.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForSequenceClassification were not initialized from the model checkpoint at dmis-lab/biobert-base-cased-v1.1 and are newly initialized: ['classifier.bias', 'classifier.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
/root/EAAE/baseline_bc5_entity.py:121: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.
  trainer = Trainer(
/root/EAAE/baseline_bc5_entity.py:121: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.
  trainer = Trainer(
/root/EAAE/baseline_bc5_entity.py:121: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.
  trainer = Trainer(
/root/EAAE/baseline_bc5_entity.py:121: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.
  trainer = Trainer(
  0%|                                                                                                                                                                                                                                                | 0/6910 [00:00<?, ?it/s]/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
Asking to pad to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no padding.
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
Asking to pad to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no padding.
Asking to pad to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no padding.
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
Asking to pad to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no padding.
[rank2]:[W reducer.cpp:1360] Warning: find_unused_parameters=True was specified in DDP constructor, but did not find any unused parameters in the forward pass. This flag results in an extra traversal of the autograd graph every iteration,  which can adversely affect performance. If your model indeed never has any unused parameters in the forward pass, consider turning this flag off. Note that this warning may be a false positive if your model has flow control causing later iterations to have unused parameters. (function operator())
[rank3]:[W reducer.cpp:1360] Warning: find_unused_parameters=True was specified in DDP constructor, but did not find any unused parameters in the forward pass. This flag results in an extra traversal of the autograd graph every iteration,  which can adversely affect performance. If your model indeed never has any unused parameters in the forward pass, consider turning this flag off. Note that this warning may be a false positive if your model has flow control causing later iterations to have unused parameters. (function operator())
[rank1]:[W reducer.cpp:1360] Warning: find_unused_parameters=True was specified in DDP constructor, but did not find any unused parameters in the forward pass. This flag results in an extra traversal of the autograd graph every iteration,  which can adversely affect performance. If your model indeed never has any unused parameters in the forward pass, consider turning this flag off. Note that this warning may be a false positive if your model has flow control causing later iterations to have unused parameters. (function operator())
[rank0]:[W reducer.cpp:1360] Warning: find_unused_parameters=True was specified in DDP constructor, but did not find any unused parameters in the forward pass. This flag results in an extra traversal of the autograd graph every iteration,  which can adversely affect performance. If your model indeed never has any unused parameters in the forward pass, consider turning this flag off. Note that this warning may be a false positive if your model has flow control causing later iterations to have unused parameters. (function operator())
{'loss': 0.6001, 'grad_norm': 2.896475076675415, 'learning_rate': 1.565730824891462e-05, 'epoch': 0.11}                                                                                                                                                                       
{'loss': 0.4999, 'grad_norm': 5.14073371887207, 'learning_rate': 1.5309985528219974e-05, 'epoch': 0.22}                                                                                                                                                                       
{'loss': 0.3726, 'grad_norm': 5.863977432250977, 'learning_rate': 1.4964978292329959e-05, 'epoch': 0.33}                                                                                                                                                                      
{'loss': 0.2808, 'grad_norm': inf, 'learning_rate': 1.4617655571635313e-05, 'epoch': 0.43}                                                                                                                                                                                    
{'loss': 0.2243, 'grad_norm': 6.913233280181885, 'learning_rate': 1.42726483357453e-05, 'epoch': 0.54}                                                                                                                                                                        
{'loss': 0.1952, 'grad_norm': 5.179006099700928, 'learning_rate': 1.3927641099855285e-05, 'epoch': 0.65}                                                                                                                                                                      
{'loss': 0.1535, 'grad_norm': 11.354004859924316, 'learning_rate': 1.358031837916064e-05, 'epoch': 0.76}                                                                                                                                                                      
{'loss': 0.1372, 'grad_norm': 3.8973429203033447, 'learning_rate': 1.3232995658465995e-05, 'epoch': 0.87}                                                                                                                                                                     
{'loss': 0.1164, 'grad_norm': 3.778580665588379, 'learning_rate': 1.2885672937771348e-05, 'epoch': 0.98}                                                                                                                                                                      
{'eval_loss': 0.8619794845581055, 'eval_precision': 0.6494246193188422, 'eval_recall': 0.7139936102236422, 'eval_f1': 0.6801801801801802, 'eval_runtime': 33.1652, 'eval_samples_per_second': 1432.285, 'eval_steps_per_second': 22.403, 'epoch': 1.0}                        
 20%|█████████████████████████████████████████████▊                                                                                                                                                                                       | 1382/6910 [02:43<08:53, 10.36it/s/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
{'loss': 0.1012, 'grad_norm': 6.851323127746582, 'learning_rate': 1.2538350217076702e-05, 'epoch': 1.09}                                                                                                                                                                      
{'loss': 0.0824, 'grad_norm': 0.18944071233272552, 'learning_rate': 1.2191027496382057e-05, 'epoch': 1.19}                                                                                                                                                                    
{'loss': 0.0827, 'grad_norm': 4.658299446105957, 'learning_rate': 1.1843704775687412e-05, 'epoch': 1.3}                                                                                                                                                                       
{'loss': 0.0796, 'grad_norm': 0.24359175562858582, 'learning_rate': 1.1496382054992767e-05, 'epoch': 1.41}                                                                                                                                                                    
{'loss': 0.0706, 'grad_norm': 17.257043838500977, 'learning_rate': 1.1149059334298121e-05, 'epoch': 1.52}                                                                                                                                                                     
{'loss': 0.0642, 'grad_norm': 1.1384830474853516, 'learning_rate': 1.0801736613603476e-05, 'epoch': 1.63}                                                                                                                                                                     
{'loss': 0.0536, 'grad_norm': 1.814898133277893, 'learning_rate': 1.045441389290883e-05, 'epoch': 1.74}                                                                                                                                                                       
{'loss': 0.0514, 'grad_norm': 3.738954782485962, 'learning_rate': 1.0107091172214184e-05, 'epoch': 1.85}                                                                                                                                                                      
{'loss': 0.0531, 'grad_norm': 5.768322467803955, 'learning_rate': 9.759768451519539e-06, 'epoch': 1.95}                                                                                                                                                                       
{'eval_loss': 1.1668195724487305, 'eval_precision': 0.6614879521604033, 'eval_recall': 0.7209584664536741, 'eval_f1': 0.6899440486745957, 'eval_runtime': 32.8102, 'eval_samples_per_second': 1447.78, 'eval_steps_per_second': 22.645, 'epoch': 2.0}                         
 40%|███████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                         | 2764/6910 [05:27<06:48, 10.15it/s/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
{'loss': 0.0386, 'grad_norm': 2.3180415630340576, 'learning_rate': 9.412445730824894e-06, 'epoch': 2.06}                                                                                                                                                                      
{'loss': 0.0222, 'grad_norm': 2.9065585136413574, 'learning_rate': 9.065123010130248e-06, 'epoch': 2.17}                                                                                                                                                                      
{'loss': 0.0334, 'grad_norm': 4.823535919189453, 'learning_rate': 8.720115774240233e-06, 'epoch': 2.28}                                                                                                                                                                       
{'loss': 0.0328, 'grad_norm': 0.37016335129737854, 'learning_rate': 8.372793053545587e-06, 'epoch': 2.39}                                                                                                                                                                     
{'loss': 0.0323, 'grad_norm': 13.117941856384277, 'learning_rate': 8.025470332850942e-06, 'epoch': 2.5}                                                                                                                                                                       
{'loss': 0.0305, 'grad_norm': 14.948902130126953, 'learning_rate': 7.678147612156297e-06, 'epoch': 2.6}                                                                                                                                                                       
{'loss': 0.0249, 'grad_norm': 3.462552547454834, 'learning_rate': 7.3308248914616515e-06, 'epoch': 2.71}                                                                                                                                                                      
{'loss': 0.0181, 'grad_norm': 0.1658060997724533, 'learning_rate': 6.9835021707670054e-06, 'epoch': 2.82}                                                                                                                                                                     
{'loss': 0.0285, 'grad_norm': 0.9844308495521545, 'learning_rate': 6.63617945007236e-06, 'epoch': 2.93}                                                                                                                                                                       
{'eval_loss': 1.4259060621261597, 'eval_precision': 0.6679523343503541, 'eval_recall': 0.7414057507987221, 'eval_f1': 0.7027649071802792, 'eval_runtime': 32.7999, 'eval_samples_per_second': 1448.237, 'eval_steps_per_second': 22.653, 'epoch': 3.0}                        
 60%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                           | 4146/6910 [08:11<04:25, 10.42it/s/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
{'loss': 0.0155, 'grad_norm': 5.2462239265441895, 'learning_rate': 6.288856729377715e-06, 'epoch': 3.04}                                                                                                                                                                      
{'loss': 0.0141, 'grad_norm': 0.00871798861771822, 'learning_rate': 5.94153400868307e-06, 'epoch': 3.15}                                                                                                                                                                      
{'loss': 0.0224, 'grad_norm': 0.007669991813600063, 'learning_rate': 5.594211287988424e-06, 'epoch': 3.26}                                                                                                                                                                    
{'loss': 0.0164, 'grad_norm': 0.18466123938560486, 'learning_rate': 5.246888567293778e-06, 'epoch': 3.36}                                                                                                                                                                     
{'loss': 0.0158, 'grad_norm': 0.004597488325089216, 'learning_rate': 4.899565846599133e-06, 'epoch': 3.47}                                                                                                                                                                    
{'loss': 0.0177, 'grad_norm': 53.647220611572266, 'learning_rate': 4.554558610709118e-06, 'epoch': 3.58}                                                                                                                                                                      
{'loss': 0.0108, 'grad_norm': 27.146150588989258, 'learning_rate': 4.207235890014472e-06, 'epoch': 3.69}                                                                                                                                                                      
{'loss': 0.0165, 'grad_norm': 0.023991812020540237, 'learning_rate': 3.859913169319827e-06, 'epoch': 3.8}                                                                                                                                                                     
{'loss': 0.0178, 'grad_norm': 1.146728754043579, 'learning_rate': 3.5125904486251816e-06, 'epoch': 3.91}                                                                                                                                                                      
{'eval_loss': 1.560632586479187, 'eval_precision': 0.6881998277347114, 'eval_recall': 0.7147603833865814, 'eval_f1': 0.7012286860581746, 'eval_runtime': 32.9012, 'eval_samples_per_second': 1443.776, 'eval_steps_per_second': 22.583, 'epoch': 4.0}                         
 80%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                             | 5528/6910 [10:54<02:13, 10.32it/s/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
{'loss': 0.0097, 'grad_norm': 0.02500852942466736, 'learning_rate': 3.165267727930536e-06, 'epoch': 4.02}                                                                                                                                                                     
{'loss': 0.0075, 'grad_norm': 0.0031004208140075207, 'learning_rate': 2.8179450072358907e-06, 'epoch': 4.12}                                                                                                                                                                  
{'loss': 0.0096, 'grad_norm': 0.8444321155548096, 'learning_rate': 2.470622286541245e-06, 'epoch': 4.23}                                                                                                                                                                      
{'loss': 0.0116, 'grad_norm': 0.47488123178482056, 'learning_rate': 2.1232995658465993e-06, 'epoch': 4.34}                                                                                                                                                                    
{'loss': 0.0125, 'grad_norm': 0.2901855409145355, 'learning_rate': 1.775976845151954e-06, 'epoch': 4.45}                                                                                                                                                                      
{'loss': 0.0109, 'grad_norm': 2.1941885948181152, 'learning_rate': 1.4286541244573086e-06, 'epoch': 4.56}                                                                                                                                                                     
{'loss': 0.0047, 'grad_norm': 0.019832076504826546, 'learning_rate': 1.081331403762663e-06, 'epoch': 4.67}                                                                                                                                                                    
{'loss': 0.0097, 'grad_norm': 0.004199695307761431, 'learning_rate': 7.340086830680175e-07, 'epoch': 4.78}                                                                                                                                                                    
{'loss': 0.0082, 'grad_norm': 0.5373740196228027, 'learning_rate': 3.86685962373372e-07, 'epoch': 4.88}                                                                                                                                                                       
{'loss': 0.0094, 'grad_norm': 0.5844587087631226, 'learning_rate': 3.936324167872649e-08, 'epoch': 4.99}                                                                                                                                                                      
{'eval_loss': 1.6353585720062256, 'eval_precision': 0.6688887600718799, 'eval_recall': 0.7373162939297124, 'eval_f1': 0.7014376462721498, 'eval_runtime': 32.5417, 'eval_samples_per_second': 1459.726, 'eval_steps_per_second': 22.832, 'epoch': 5.0}                        
{'train_runtime': 819.5303, 'train_samples_per_second': 269.722, 'train_steps_per_second': 8.432, 'train_loss': 0.0807713569547609, 'epoch': 5.0}                                                                                                                             
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6910/6910 [13:39<00:00,  8.43it/s]
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋| 742/743 [00:32<00:00, 24.94it/s]Dev set: {'eval_loss': 1.4259060621261597, 'eval_precision': 0.6679523343503541, 'eval_recall': 0.7414057507987221, 'eval_f1': 0.7027649071802792, 'eval_runtime': 32.6858, 'eval_samples_per_second': 1453.291, 'eval_steps_per_second': 22.732, 'epoch': 5.0}
Dev set: {'eval_loss': 1.4259060621261597, 'eval_precision': 0.6679523343503541, 'eval_recall': 0.7414057507987221, 'eval_f1': 0.7027649071802792, 'eval_runtime': 32.6858, 'eval_samples_per_second': 1453.292, 'eval_steps_per_second': 22.732, 'epoch': 5.0}
Dev set: {'eval_loss': 1.4259060621261597, 'eval_precision': 0.6679523343503541, 'eval_recall': 0.7414057507987221, 'eval_f1': 0.7027649071802792, 'eval_runtime': 32.6867, 'eval_samples_per_second': 1453.251, 'eval_steps_per_second': 22.731, 'epoch': 5.0}
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 743/743 [00:32<00:00, 22.77it/s]
Dev set: {'eval_loss': 1.4259060621261597, 'eval_precision': 0.6679523343503541, 'eval_recall': 0.7414057507987221, 'eval_f1': 0.7027649071802792, 'eval_runtime': 32.6839, 'eval_samples_per_second': 1453.378, 'eval_steps_per_second': 22.733, 'epoch': 5.0}
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/generic.py:271: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr = np.array(obj)
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋| 759/760 [00:33<00:00, 22.54it/s]Test set: {'eval_loss': 1.4458245038986206, 'eval_precision': 0.6548223350253807, 'eval_recall': 0.7370492635855764, 'eval_f1': 0.6935069589630249, 'eval_runtime': 33.8939, 'eval_samples_per_second': 1434.418, 'eval_steps_per_second': 22.423, 'epoch': 5.0}
Test set: {'eval_loss': 1.4458245038986206, 'eval_precision': 0.6548223350253807, 'eval_recall': 0.7370492635855764, 'eval_f1': 0.6935069589630249, 'eval_runtime': 33.8948, 'eval_samples_per_second': 1434.379, 'eval_steps_per_second': 22.422, 'epoch': 5.0}
Test set: {'eval_loss': 1.4458245038986206, 'eval_precision': 0.6548223350253807, 'eval_recall': 0.7370492635855764, 'eval_f1': 0.6935069589630249, 'eval_runtime': 33.8964, 'eval_samples_per_second': 1434.31, 'eval_steps_per_second': 22.421, 'epoch': 5.0}
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 760/760 [00:33<00:00, 22.46it/s]
Test set: {'eval_loss': 1.4458245038986206, 'eval_precision': 0.6548223350253807, 'eval_recall': 0.7370492635855764, 'eval_f1': 0.6935069589630249, 'eval_runtime': 33.8913, 'eval_samples_per_second': 1434.528, 'eval_steps_per_second': 22.425, 'epoch': 5.0}
(base) root@autodl-container-664048b698-da024dca:~/EAAE# torchrun --nproc_per_node=4 baseline_bc5_entity_with_reg_cosine.py